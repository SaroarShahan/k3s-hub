# .github/workflows/deploy.yml

name: Deploy to K3s

on:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed
    branches: [ main ]
  workflow_dispatch:
  workflow_call: # Allow other workflows to call this
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'main'
        type: string
      image_tag:
        description: 'Docker image tag to deploy'
        required: false
        default: 'latest'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  K3S_SERVER: ${{ secrets.K3S_SERVER }}
  USER_NAME: saroarshahan

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    
    environment: 
      name: main
      url: http://${{ env.K3S_SERVER }}:30100

    permissions:
      contents: read
      deployments: none

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Determine image tag
      id: image-tag
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          IMAGE_TAG="${{ github.event.inputs.image_tag }}"
        else
          IMAGE_TAG="latest"
        fi
        echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

    - name: Replace image in deployment manifest
      run: |
        # Update deploy.yaml with the correct image
        sed -i "s|ghcr.io/${{ env.USER_NAME }}/${{ env.IMAGE_NAME }}:latest|${{ steps.image-tag.outputs.image }}|g" k3s/deploy.yaml

        # Show the updated deployment
        echo "=== Updated Deployment Manifest ==="
        cat k3s/deploy.yaml

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add SSH host key
      run: |
        ssh-keyscan -H ${{ env.K3S_SERVER }} >> ~/.ssh/known_hosts

    - name: Copy deployment files to server
      run: |
        # Copy all k3s manifests to server
        scp -r k3s/ ubuntu@${{ env.K3S_SERVER }}:~/

    - name: Create registry secret
      run: |
        ssh ubuntu@${{ env.K3S_SERVER }} << 'EOF'
          # Use k3s kubectl if regular kubectl has issues
          if ! command -v kubectl &> /dev/null; then
            alias kubectl="sudo k3s kubectl"
          fi

          # Create registry secret for private repos
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=${{ env.REGISTRY }} \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GHCR_TOKEN }} \
            --docker-email=${{ github.actor }}@users.noreply.github.com \
            --dry-run=client -o yaml | kubectl apply -f -
        EOF

    - name: Deploy to K3s
      id: deploy
      run: |
        ssh ubuntu@${{ env.K3S_SERVER }} << 'EOF'
          # Use k3s kubectl if regular kubectl has issues
          if ! command -v kubectl &> /dev/null; then
            alias kubectl="sudo k3s kubectl"
          fi

          # Apply all k3s manifests
          kubectl apply -f k3s/

          # Wait for rollout to complete (shorter timeout for k3s)
          kubectl rollout status deployment/html-app --timeout=180s

          # Show deployment status
          echo "=== K3s Deployment Status ==="
          kubectl get deployments html-app -o wide
          
          echo "=== Pods Status ==="
          kubectl get pods -l app=html-app -o wide
          
          echo "=== Service Status ==="
          kubectl get services html-app-service -o wide
          
          echo "=== K3s Nodes ==="
          kubectl get nodes -o wide
        EOF

    - name: Health check
      run: |
        ssh ubuntu@${{ env.K3S_SERVER }} << 'EOF'
          # Wait for pods to be ready
          kubectl wait --for=condition=ready pod -l app=html-app --timeout=120s
          
          # Test application endpoint
          echo "üîç Testing application health..."
          for i in {1..5}; do
            if curl -f -s http://localhost:30100 > /dev/null; then
              echo "‚úÖ Health check passed (attempt $i)"
              break
            else
              echo "‚ùå Health check failed (attempt $i), retrying in 10s..."
              sleep 10
            fi
          done
          
          # Final health check
          curl -f http://localhost:30100 || exit 1
        EOF

    - name: Post deployment summary
      run: |
        echo "### üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ github.event.inputs.environment || 'main' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ steps.image-tag.outputs.image }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Server**: ${{ env.K3S_SERVER }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: http://${{ env.K3S_SERVER }}:30100" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ‚úÖ Deployed Successfully" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üéâ Deployment completed successfully!"
          echo "üåê Application is live at: http://${{ env.K3S_SERVER }}:30100"
        else
          echo "‚ùå Deployment failed. Check the logs above for details."
        fi