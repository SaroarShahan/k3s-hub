# .github/workflows/deploy.yml

name: Deploy to K3s

on:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed
    branches: [ main ]
  workflow_dispatch:
  workflow_call:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: false
        default: 'latest'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  K3S_SERVER: ${{ secrets.K3S_SERVER }}
  USER_NAME: saroarshahan

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'

    permissions:
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Determine image tag
      id: image-tag
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          IMAGE_TAG="${{ github.event.inputs.image_tag }}"
        elif [ "${{ github.event_name }}" == "workflow_call" ]; then
          IMAGE_TAG="${{ inputs.image_tag }}"
        else
          IMAGE_TAG="latest"
        fi
        echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

    - name: Enable SSH and Firewall
      run: |
        sudo systemctl enable ssh
        sudo ufw allow ssh # For UFW
        sudo firewall-cmd --add-service=ssh --permanent # For firewalld
        sudo firewall-cmd --reload # For firewalld

    - name: Setup SSH with Enhanced Connectivity
      run: |
        # Create SSH directory
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Add private key
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Validate SSH key
        if [ ! -s ~/.ssh/id_rsa ]; then
          echo "‚ùå SSH private key is empty"
          exit 1
        fi
        
        # Create SSH config with robust settings
        cat > ~/.ssh/config << EOF
        Host k3s-server
          HostName ${{ env.K3S_SERVER }}
          User ubuntu
          IdentityFile ~/.ssh/id_rsa
          StrictHostKeyChecking no
          UserKnownHostsFile /dev/null
          LogLevel ERROR
          ConnectTimeout 30
          ServerAliveInterval 60
          ServerAliveCountMax 3
          TCPKeepAlive yes
        EOF
        chmod 600 ~/.ssh/config
        
        # Enhanced connectivity test
        echo "üîç Testing K3s server connectivity..."
        
        # Ping test with timeout
        if timeout 15s ping -c 3 ${{ env.K3S_SERVER }} > /dev/null 2>&1; then
          echo "‚úÖ Server is reachable via ping"
        else
          echo "‚ùå Server ping failed - checking if server is accessible"
        fi
        
        # Port connectivity test
        if timeout 15s nc -zv ${{ env.K3S_SERVER }} 22 2>/dev/null; then
          echo "‚úÖ SSH port 22 is open"
        else
          echo "‚ùå SSH port 22 is not accessible"
          echo "Possible issues:"
          echo "1. VM is stopped or suspended"
          echo "2. SSH service not running"
          echo "3. Firewall blocking port 22"
          echo "4. Network configuration changed"
          exit 1
        fi
        
        # SSH authentication test
        echo "üîê Testing SSH authentication..."
        if timeout 30s ssh k3s-server "echo 'SSH authentication successful'"; then
          echo "‚úÖ SSH connection established successfully"
        else
          echo "‚ùå SSH authentication failed"
          echo "Troubleshooting steps:"
          echo "1. Verify SSH_PRIVATE_KEY secret contains the full private key"
          echo "2. Ensure public key is added to ~/.ssh/authorized_keys on server"
          echo "3. Check SSH service: sudo systemctl status ssh"
          echo "4. Check SSH logs: sudo journalctl -u ssh -n 20"
          exit 1
        fi

    - name: Update deployment manifest
      run: |
        # Update k3s deployment with correct image
        sed -i "s|ghcr.io/${{ env.USER_NAME }}/${{ env.IMAGE_NAME }}:latest|${{ steps.image-tag.outputs.image }}|g" k3s/deploy.yaml
        
        echo "=== Updated Deployment Manifest ==="
        cat k3s/deploy.yaml

    - name: Deploy to K3s Cluster
      run: |
        echo "üöÄ Starting deployment to K3s cluster..."
        
        # Copy deployment files
        echo "üìÅ Copying deployment files..."
        scp -r k3s/ k3s-server:~/deployment/
        
        # Execute deployment on K3s server
        ssh k3s-server << 'EOF'
          echo "üîß Setting up kubectl..."
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
          
          # Verify K3s cluster is healthy
          echo "üè• Checking K3s cluster health..."
          kubectl get nodes || {
            echo "‚ùå K3s cluster is not healthy"
            sudo systemctl status k3s
            exit 1
          }
          
          # Create registry secret
          echo "üîë Creating registry secret..."
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --docker-email=${{ github.actor }}@users.noreply.github.com \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply deployment
          echo "üì¶ Applying K3s deployment..."
          kubectl apply -f ~/deployment/k3s/
          
          # Wait for rollout
          echo "‚è≥ Waiting for deployment rollout..."
          kubectl rollout status deployment/html-app --timeout=300s
          
          # Show deployment status
          echo "üìä Deployment Status:"
          kubectl get deployments html-app -o wide
          kubectl get pods -l app=html-app -o wide
          kubectl get services html-app-service -o wide
          
          echo "‚úÖ Deployment completed successfully!"
        EOF

    - name: Health Check & Verification
      run: |
        echo "üè• Performing health checks..."
        
        ssh k3s-server << 'EOF'
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
          
          # Wait for pods to be ready
          echo "üîÑ Waiting for pods to be ready..."
          kubectl wait --for=condition=ready pod -l app=html-app --timeout=180s
          
          # Application health check
          echo "üåê Testing application endpoint..."
          for i in {1..5}; do
            if curl -f -s http://localhost:30100 > /dev/null; then
              echo "‚úÖ Health check passed (attempt $i/5)"
              curl -s http://localhost:30100 | head -n 5
              break
            else
              echo "‚ö†Ô∏è Health check failed (attempt $i/5), retrying in 10s..."
              sleep 10
            fi
          done
          
          # Final verification
          if curl -f -s http://localhost:30100 > /dev/null; then
            echo "üéâ Application is healthy and responding!"
          else
            echo "‚ùå Application health check failed"
            kubectl logs -l app=html-app --tail=20
            exit 1
          fi
        EOF

    - name: Deployment Summary
      if: always()
      run: |
        echo "### üöÄ K3s Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Image** | \`${{ steps.image-tag.outputs.image }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Server** | \`${{ env.K3S_SERVER }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Port** | \`30100\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Status** | ${{ job.status == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Timestamp** | \`$(date -u)\` |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "**üåê Access URL:** http://${{ env.K3S_SERVER }}:30100" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üéâ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Deployment failed. Check logs for details.**" >> $GITHUB_STEP_SUMMARY
        fi